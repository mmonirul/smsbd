import * as base from 'CoreApiBaseClient';
/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.11.3.0 (NJsonSchema v9.9.17.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import * as jQuery from '../lib/jquery/dist/jquery';

export interface ITripsClient {
    /**
     * @return Success
     */
    stopsGet(tripName: string): Promise<void>;
    /**
     * @stop (optional) 
     * @return Success
     */
    stopsPost(tripName: string, stop?: StopViewModel): Promise<void>;
}

export class TripsClient extends base.CoreApiBaseClient implements ITripsClient {
    baseUrl: string; 
    beforeSend: any = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(configuration: base.CoreApiConfig, baseUrl?: string) {
        super(configuration);
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    stopsGet(tripName: string) {
        return new Promise<void>((resolve, reject) => {
            this.stopsGetWithCallbacks(tripName, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private stopsGetWithCallbacks(tripName: string, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/trips/{tripName}/stops";
        if (tripName === undefined || tripName === null)
            throw new Error("The parameter 'tripName' must be defined.");
        url_ = url_.replace("{tripName}", encodeURIComponent("" + tripName)); 
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
            }
        })).done((_data, _textStatus, xhr) => {
            this.processStopsGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processStopsGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processStopsGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processStopsGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processStopsGet(xhr: any): void {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText; 
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText; 
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @stop (optional) 
     * @return Success
     */
    stopsPost(tripName: string, stop?: StopViewModel) {
        return new Promise<void>((resolve, reject) => {
            this.stopsPostWithCallbacks(tripName, stop, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private stopsPostWithCallbacks(tripName: string, stop: StopViewModel, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/trips/{tripName}/stops";
        if (tripName === undefined || tripName === null)
            throw new Error("The parameter 'tripName' must be defined.");
        url_ = url_.replace("{tripName}", encodeURIComponent("" + tripName)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(stop);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
            }
        })).done((_data, _textStatus, xhr) => {
            this.processStopsPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processStopsPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processStopsPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processStopsPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processStopsPost(xhr: any): void {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText; 
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText; 
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }
}

export interface IApiClient {
    /**
     * @return Success
     */
    tripsGet(): Promise<void>;
    /**
     * @trip (optional) 
     * @return Success
     */
    tripsPost(trip?: TripViewModel): Promise<void>;
}

export class ApiClient extends base.CoreApiBaseClient implements IApiClient {
    baseUrl: string; 
    beforeSend: any = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(configuration: base.CoreApiConfig, baseUrl?: string) {
        super(configuration);
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    tripsGet() {
        return new Promise<void>((resolve, reject) => {
            this.tripsGetWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private tripsGetWithCallbacks(onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/trips";
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
            }
        })).done((_data, _textStatus, xhr) => {
            this.processTripsGetWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTripsGetWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processTripsGetWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTripsGet(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTripsGet(xhr: any): void {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText; 
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText; 
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * @trip (optional) 
     * @return Success
     */
    tripsPost(trip?: TripViewModel) {
        return new Promise<void>((resolve, reject) => {
            this.tripsPostWithCallbacks(trip, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }
    
    private tripsPostWithCallbacks(trip: TripViewModel, onSuccess?: (result: void) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/trips";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(trip);

        jQuery.ajax(this.transformOptions({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
            }
        })).done((_data, _textStatus, xhr) => {
            this.processTripsPostWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processTripsPostWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processTripsPostWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processTripsPost(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processTripsPost(xhr: any): void {
        const status = xhr.status; 

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText; 
            return;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText; 
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }
}

export class StopViewModel implements IStopViewModel {
    name: string;
    latitude?: number;
    longitude?: number;
    order: number;
    arrival: Date;

    constructor(data?: IStopViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.latitude = data["latitude"];
            this.longitude = data["longitude"];
            this.order = data["order"];
            this.arrival = data["arrival"] ? new Date(data["arrival"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): StopViewModel {
        let result = new StopViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["order"] = this.order;
        data["arrival"] = this.arrival ? this.arrival.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IStopViewModel {
    name: string;
    latitude?: number;
    longitude?: number;
    order: number;
    arrival: Date;
}

export class TripViewModel implements ITripViewModel {
    name: string;
    dateCreated?: Date;

    constructor(data?: ITripViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TripViewModel {
        let result = new TripViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ITripViewModel {
    name: string;
    dateCreated?: Date;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}